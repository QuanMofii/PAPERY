services:
  server:
    restart: always
    build:
      context: .
      dockerfile: Dockerfile.server
    env_file:
      - ./src/.env
      - ./src/.env.docker
    environment:
      PYTHONPATH: /code/app
    # command:  sh -c "uvicorn app.main:app --host 0.0.0.0 --port 8000 reload:true"
    # -------- replace with comment to run with gunicorn --------
    # command: gunicorn app.main:app -w 4 -k uvicorn.workers.UvicornWorker -b 0.0.0.0:8000
    depends_on:
      # db:
      #   condition: service_healthy
      # redis:
      #   condition: service_healthy
      - db
      - redis
    volumes:
      # - ./src/app:/code/app
      - ./src/.env:/code/.env
      - ./src/migrations:/code/migrations
    ports:
      - "8000:8000"
    # -------- replace with comment if you are using nginx --------
    # expose:
    #   - "8000"
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8000/api/health-check/"]
    #   interval: 10m
    #   timeout: 5s
    #   retries: 5
    #   start_period: 10s
    

  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    # command: arq app.core.worker.settings.WorkerSettings
    env_file:
      - ./src/.env
      - ./src/.env.docker
    environment:
      PYTHONPATH: /code/app
    depends_on:
      # db:
      #   condition: service_healthy
      # redis:
      #   condition: service_healthy
      # server:
      #   condition: service_healthy
      - db
      - redis
      - server
    volumes:
      - ./src/app/core/worker:/code/core/worker
      - ./src/app/core/config.py:/code/core/config.py
      # - ./src/migrations:/code/migrations

  db:
    image: mysql:8.0.38
    env_file:
      # - ./src/.env
      - ./src/.env.docker
    # environment:
      # MYSQL_DATABASE: mydatabase
      # MYSQL_ROOT_PASSWORD: mysecretpassword  
      # MYSQL_USER: root
    command: --default-authentication-plugin=caching_sha2_password
    volumes:
      - mysql_data:/var/lib/mysql
    # -------- replace with comment to run migrations with docker --------
    # expose:
    #   - "3306"
    ports:
      - "3308:3308"
    # healthcheck:
    #   test: ["CMD", "mysqladmin" ,"ping", "-h", "127.0.0.1", "-u", "root", "-p", "mysecretpassword"]
    #   interval: 10m
    #   timeout: 10s
    #   retries: 10

  redis:
    image: redis:alpine
    volumes:
      - redis-data:/data
    # expose:
    #   - "6379"
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 5s
    
#-------- uncomment to run postgres instead of mysql --------    
  # db:
    #   image: postgres:13
    #   env_file:
    #     - ./src/.env.docker
    #   environment:
    #     POSTGRES_USER: root
    #     POSTGRES_PASSWORD: mysecretpassword
    #     POSTGRES_DB: mydatabase
    #   volumes:
    #     - postgres-data:/var/lib/postgresql/data
    #   # -------- replace with comment to run migrations with docker --------
    #   expose:
    #     - "5432"
    #   # ports:
    #   #  - 5432:5432
  #-------- uncomment to run with pgadmin --------
  # pgadmin:
  #   container_name: pgadmin4
  #   image: dpage/pgadmin4:latest
  #   restart: always
  #   ports:
  #     - "5050:80"
  #   volumes:
  #     - pgadmin-data:/var/lib/pgadmin
  #   env_file:
  #     - ./src/.env
  #   depends_on:
  #     - db

  #-------- uncomment to run with nginx --------
  # nginx:
  #   image: nginx:latest
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./default.conf:/etc/nginx/conf.d/default.conf
  #   depends_on:
  #     - server
  
  #-------- uncomment to run tests --------
  # pytest:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   env_file:
  #     - ./src/.env
  #     - ./src/.env.docker
  #   environment:
  #     PYTHONPATH: /code/app
  #   depends_on:
  #     - db
  #     - redis
  #   command: python -m pytest ./tests
  #   volumes:
  #     - .:/code
volumes:
  # postgres-data:
  mysql_data:
  redis-data:
  #pgadmin-data:
